import numpy as np

# Activation Function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Derivative of Sigmoid
def sigmoid_derivative(x):
    return x * (1 - x)

# Input and Output Data
X = np.array([[0,0],[0,1],[1,0],[1,1]])
y = np.array([[0],[1],[1],[0]])  # XOR Problem

# Initialize Weights
np.random.seed(42)
weights_input_hidden = np.random.uniform(size=(2,2))
weights_hidden_output = np.random.uniform(size=(2,1))

# Training
for epoch in range(10000):
    # Forward Propagation
    hidden_input = np.dot(X, weights_input_hidden)
    hidden_output = sigmoid(hidden_input)
    
    final_input = np.dot(hidden_output, weights_hidden_output)
    final_output = sigmoid(final_input)
    
    # Backward Propagation
    error = y - final_output
    d_output = error * sigmoid_derivative(final_output)
    
    error_hidden = d_output.dot(weights_hidden_output.T)
    d_hidden = error_hidden * sigmoid_derivative(hidden_output)
    
    # Update Weights
    weights_hidden_output += hidden_output.T.dot(d_output) * 0.1
    weights_input_hidden += X.T.dot(d_hidden) * 0.1

# Final Prediction
print("Predicted Output after Training:")
print(final_output)
