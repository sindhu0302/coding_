from collections import deque

def bfs(start, goal):
    queue = deque([[start]])
    visited = set()

    while queue:
        path = queue.popleft()
        state = path[-1]

        if state == goal:
            return path

        visited.add(tuple(state))
        i = state.index(0)  # blank space
        moves = [(-1,0),(1,0),(0,-1),(0,1)]
        x, y = divmod(i, 3)

        for dx, dy in moves:
            nx, ny = x+dx, y+dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                ni = nx*3+ny
                new_state = state[:]
                new_state[i], new_state[ni] = new_state[ni], new_state[i]
                if tuple(new_state) not in visited:
                    queue.append(path+[new_state])

start = [1,2,3,4,0,6,7,5,8]
goal  = [1,2,3,4,5,6,7,8,0]

solution = bfs(start, goal)
for step in solution:
    for i in range(0,9,3):
        print(step[i:i+3])
    print()
