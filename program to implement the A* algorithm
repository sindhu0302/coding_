from queue import PriorityQueue

def a_star(graph, start, goal, heuristic):
    open_list = PriorityQueue()
    open_list.put((0, start))
    came_from = {}
    g = {start: 0}

    while not open_list.empty():
        _, current = open_list.get()
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]

        for neighbor, cost in graph[current]:
            new_cost = g[current] + cost
            if neighbor not in g or new_cost < g[neighbor]:
                g[neighbor] = new_cost
                f = new_cost + heuristic[neighbor]
                open_list.put((f, neighbor))
                came_from[neighbor] = current

graph = {
    'A': [('B', 1), ('C', 3)],
    'B': [('D', 1), ('E', 5)],
    'C': [('F', 2)],
    'D': [('G', 3)],
    'E': [('G', 2)],
    'F': [('G', 1)],
    'G': []
}
heuristic = {'A': 6, 'B': 4, 'C': 3, 'D': 4, 'E': 2, 'F': 1, 'G': 0}

print("Path:", a_star(graph, 'A', 'G', heuristic))
